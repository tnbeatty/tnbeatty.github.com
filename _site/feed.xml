<?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tnbeatty$ gcc ~/thoughts.brain</title>
    <link>http://tnbeatty.github.com</link>
    <atom:link href="http://tnbeatty.github.com/feed.xml" rel="self" type="application/rss+xml" />
    <description>I'm not lazy - my code's just compiling.</description>
    <language>en-us</language>
    <pubDate>Fri, 02 Nov 2012 21:40:57 -0400</pubDate>
    <lastBuildDate>Fri, 02 Nov 2012 21:40:57 -0400</lastBuildDate>

    
    <item>
      <title>Go Fix for Safari</title>
      <link>http://tnbeatty.github.com/blog/2012/10/31/go-fix-for-safari.html</link>
      <pubDate>Wed, 31 Oct 2012 00:00:00 -0400</pubDate>
      <author>nate@strabogis.com (Nate Beatty)</author>
      <guid>http://tnbeatty.github.com/blog/2012/10/31/go-fix-for-safari</guid>
      <description>&lt;p&gt;31 Oct 2012 - Madison, CT&lt;/p&gt;

&lt;p&gt;Today marks the release of the beta version of a Safari extension that I have been working on. The purpose of the extension is to allow on and off campus access to the Middlebury College &amp;#8216;go/&amp;#8217; system. &lt;a href='https://raw.github.com/tnbeatty/Middlebury-Go-Fix/master/Middlebury%20Go%20Fix.safariextz'&gt;Download&lt;/a&gt; the extension from the &lt;a href='https://github.com/tnbeatty/Middlebury-Go-Fix'&gt;git repo&lt;/a&gt; and install it. It auto-updates to the latest version and should allow you full access to &lt;em&gt;go/&lt;/em&gt; links from anywhere. View the &lt;a href='/projects/2012/10/27/go-for-safari.html'&gt;project&lt;/a&gt; for more details.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Static Library Bug</title>
      <link>http://tnbeatty.github.com/blog/2012/07/16/static-library-bug.html</link>
      <pubDate>Mon, 16 Jul 2012 00:00:00 -0400</pubDate>
      <author>nate@strabogis.com (Nate Beatty)</author>
      <guid>http://tnbeatty.github.com/blog/2012/07/16/static-library-bug</guid>
      <description>&lt;p&gt;16 Jul 2012 - Madison, CT&lt;/p&gt;
&lt;pre class='markdown-html-error' style='border: solid 3px red; background-color: pink'&gt;REXML could not parse this XML/HTML: 
&amp;lt;!---
Post content goes here.
--&amp;gt;&lt;/pre&gt;
&lt;p&gt;While trying to build a static library, I re-discovered a bug which causes categories to be excluded from the compiled .a library file. Apple has documented the issue.&lt;/p&gt;

&lt;p&gt;Apple&amp;#8217;s &lt;a href='https://developer.apple.com/library/mac/#qa/qa2006/qa1490.html'&gt;response&lt;/a&gt; to a previous inquery.&lt;/p&gt;

&lt;p&gt;I figured I would post this here as it took me a while to dig up.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Modern Objective-C</title>
      <link>http://tnbeatty.github.com/blog/2012/06/29/modern-objective-c.html</link>
      <pubDate>Fri, 29 Jun 2012 00:00:00 -0400</pubDate>
      <author>nate@strabogis.com (Nate Beatty)</author>
      <guid>http://tnbeatty.github.com/blog/2012/06/29/modern-objective-c</guid>
      <description>&lt;p&gt;29 Jun 2012 - Madison, CT&lt;/p&gt;
&lt;pre class='markdown-html-error' style='border: solid 3px red; background-color: pink'&gt;REXML could not parse this XML/HTML: 
&amp;lt;!---
Post content goes here.
--&amp;gt;&lt;/pre&gt;
&lt;p&gt;Today I watched a couple of &lt;a href='https://developer.apple.com/wwdc/'&gt;WWDC talks&lt;/a&gt; to stay current with Cocoa and modern Objective-C. It turns out that Apple has made some particularly helpful changes this year that will substantially improve the organization and readability of my code. I am very impressed with the power and complexity of Apple&amp;#8217;s compiler design - it is truly extraordinary.&lt;/p&gt;

&lt;h2 id='accessor_generation'&gt;Accessor Generation&lt;/h2&gt;

&lt;p&gt;Before I get to my favorite new feature, I feel as though I need to at least mention the changes to generating setters and getters for properties. From now on, properties are synthesized automatically. This is great news, as I am constantly forgetting to synthesize and create instance variables. Even better, the instance variables are automatically generated with the standard underscore naming convention. Previously, I would have two files with the following code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;myObject.h&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;myObject.m&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;Now, the part in myObject.m is generated for me&amp;#8230; How convenient!&lt;/p&gt;

&lt;h2 id='private_class_methods'&gt;Private Class Methods&lt;/h2&gt;

&lt;p&gt;Another feature that deserves mention is the ability to write private class methods without having to declare them in the header file (which would make them public), or extend the class via a category @interface within your class .m file. That&amp;#8217;s it - just don&amp;#8217;t declare the private method. Awesome.&lt;/p&gt;

&lt;h2 id='object_literals'&gt;Object Literals&lt;/h2&gt;

&lt;p&gt;This is my favorite change to Objective-C. Having had some experience with Java, Python, Ruby, and other languages that have cleaner syntax, I have been driven crazy about all of the text involved with making objects in my code. First off, now you can make NSNumbers just like you can make an NSString, designated by the @ symbol. For example:&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;Dictionaries and arrays take a tremendous amount of text. To create a dictionary, I have had to write something like this:&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;That is obviously unreadable. In the same manner as an NSString and an NSNumber, arrays and numbers are replaced with the @-notation @&lt;span /&gt; and @{}. Thus, the above code can be replaced with the following:&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;Piece of cake. Apple wins again.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>AngelHack Summer 2012</title>
      <link>http://tnbeatty.github.com/blog/2012/06/25/angelhack-summer-2012.html</link>
      <pubDate>Mon, 25 Jun 2012 00:00:00 -0400</pubDate>
      <author>nate@strabogis.com (Nate Beatty)</author>
      <guid>http://tnbeatty.github.com/blog/2012/06/25/angelhack-summer-2012</guid>
      <description>&lt;p&gt;25 Jun 2012 - Boston, MA&lt;/p&gt;
&lt;pre class='markdown-html-error' style='border: solid 3px red; background-color: pink'&gt;REXML could not parse this XML/HTML: 
&amp;lt;!---
Post content goes here.
--&amp;gt;&lt;/pre&gt;&lt;img alt='Angelhack Logo' src='/assets/images/post_images/angelhack/ahack_logo.png' style='float: left; box-shadow: none; margin-top: 0px; margin-bottom: 0px;' /&gt;
&lt;p&gt;This morning, I returned from my first hackathon, &lt;a href='http://angelhack.com/'&gt;AngelHack&lt;/a&gt; in Boston. The &lt;a href='http://strabogis.com'&gt;Strabo&lt;/a&gt; crew teamed up with Middlebury students &lt;a href='http://www.teddyknox.me/'&gt;Teddy Knox&lt;/a&gt; and &lt;a href='http://worthbak.com/'&gt;Worth Baker&lt;/a&gt; to form Team Natarré. Of course I live-tweeted the whole thing (as did Worth) &lt;a href='https://twitter.com/#!/search/%23AngelHackBOS'&gt;#AngelHackBos&lt;/a&gt;, but I figured I should give it a more thorough overview in a blog post.&lt;/p&gt;

&lt;p&gt;&lt;img alt='Team Hacks' src='/assets/images/post_images/angelhack/ahack_dinner.JPG' /&gt;&lt;/p&gt;

&lt;p&gt;Because no one on the team had competed in a hackathon before, we didn&amp;#8217;t really know what to expect. We sat down the night before to decide what we wanted to build. After tossing a couple of ideas on the table, Worth suggested a story sharing social network. He pitched his idea, a website to showcase infrequently told and underappreciated yet powerful stories that would not otherwise have a stage. The idea was solid and we figured that technologically, it would be feasible to get an MVP built in our alloted 24 hours at AngelHack. It would be called Natarré.&lt;/p&gt;

&lt;h3 id='the_setup'&gt;The Setup&lt;/h3&gt;

&lt;p&gt;I arrived at the &lt;a href='http://microsoftcambridge.com/Default.aspx'&gt;Microsoft N.E.R.D. Center&lt;/a&gt; with Team Natarré at 9:00am on Saturday June 23. We met some of our competitors and talked generally about our product over breakfast. The event sponsors gave talks, many of which were relevant and interesting.&lt;/p&gt;

&lt;p&gt;Of particular note were the demos by &lt;a href='http://www.rim.com/'&gt;RIM&lt;/a&gt; and &lt;a href='http://www.microsoft.com/en-us/default.aspx'&gt;Microsoft&lt;/a&gt;. The Microsoft talk featured &lt;a href='http://www.windowsazure.com/en-us/'&gt;Windows Azure&lt;/a&gt;, their public cloud hosting solution. I have long been a Microsoft skeptic, and although the demo wasn&amp;#8217;t very good (they had some technical difficulties, although the fault was not thier own), the product looks excellent. I was impressed by the cross-platform virtual machine support and (surprise) the user interface of the management site. I haven&amp;#8217;t played around with Azure myself, but from what I can tell, they are at least on the same playing field as the best in the business, &lt;a href='http://www.heroku.com/'&gt;Heroku&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img alt='Our View' src='/assets/images/post_images/angelhack/ahack_boston.JPG' /&gt;&lt;/p&gt;

&lt;p&gt;The RIM talk was interesting because I had completely forgotten that &lt;a href='http://us.blackberry.com/'&gt;Blackberry&lt;/a&gt; was still a product. I have seen recent user data and app revenue charts that don&amp;#8217;t even include Blackberry devices as a category and they seemed completely gone from the market landscape (except for their occasional appearance in a &lt;a href='http://www.cbsnews.com/8301-505123_162-57460107/rim-shares-dive-to-nine-year-low-after-downgrade/'&gt;negative news&lt;/a&gt; article). With shares at an all time low, $9.36 at the end of the day on June 25, they are desperate to build developer support. If they have hope of surviving, they need a robust developer network and app marketplace to compete with Apple and Android. Of course, they completely understand this and seem to be trying to revamp their company and their product lineup. They seem to be doing everything they can to support developers and their new devices natively support a remarkable number of frameworks and languages. I also got my hands on the new playbook, which seems like a very cool piece of gear. I do like the user interface and I think they have some good ideas with the way that the touch screen includes gestures over the bezel. They are obviously working hard to deliver new products that suit both devs and customers.&lt;/p&gt;

&lt;p&gt;&lt;img alt='Team Hacks' src='/assets/images/post_images/angelhack/ahack_team.JPG' /&gt;&lt;/p&gt;

&lt;h3 id='the_hack'&gt;The Hack&lt;/h3&gt;

&lt;p&gt;After a delicious lunch generously sponsored by &lt;a href='http://www.wholefoodsmarket.com/'&gt;Whole Foods&lt;/a&gt; and a visit to the local Apple Store and Best Buy, we settled back into the NERD center for our 2:00pm coding starttime. At that point, we still had to develop the app idea, hammer out a user interface, build and API spec, and figure out our workflow as a team before we could even put eyes on the screen and fingers on the keyboard. It was nearing dinnertime before I had even opened xcode and I made my first real commit after dinner at about 9:00pm after the completion of the login models, views, and controllers. At that point, I grabbed my first of two beers (yay, open bar!) and started to hack away at the view layout.&lt;/p&gt;
&lt;img src='/assets/images/post_images/angelhack/ahack_destruction.JPG' style='float: left;' /&gt;
&lt;p&gt;Saturday night was long - I personally polished off enough Red Bull to kill a small hippopotamus. I was in charge of building the iPhone application, which was essentially a story reading app. The components of the app included the ability to login with your Natarré account (or create an account), view and sort lists of stories by most popular, most recent, tag stories as favorites, add them to a reading list for later consumption, and also view lists of your personal favorites or read-it-laters. Of course, all of the navigation controllers were written custom to support a custom interface and I did a reasonably complicated (for a hackathon) subclass of a table controller to support pull-to-refresh. Teddy spearheaded the Android app which needed similar functionality and Will wrote the web app, which he crafted on the Rails framework. Parker and Worth worked as a team to design the user interface and app flow and then made beautiful custom graphics for the whole thing. Later in the night, or should I say early in the morning, Worth made an exceptional marketing video to demonstrate our work and the idea behind Natarré to the judges.&lt;/p&gt;

&lt;p&gt;&lt;img alt='Natarré' src='/assets/images/post_images/angelhack/iTunesArtwork.png' /&gt;&lt;/p&gt;

&lt;h3 id='the_product'&gt;The Product&lt;/h3&gt;

&lt;p&gt;We ended up accomplishing most of an MVP. By the 2:00pm deadline on Sunday we had a working application, as bug-free as we could make it, and were pretty confident of its functionality if it came time for us to show it off to the crowd. Although many secondary features were left out in a rush to build a more robust core product, we wrote a tremendous amount of code in such a short period of time. We started the 24 hour hack with only a slight concept of what the final product would look like and by the end, we had designed three applications (web and two mobile), coded the entire thing by hand - it all had to be typed out in the moment, and filmed, compiled, and edited a ninety second marketing pitch. Sweet.&lt;/p&gt;

&lt;h3 id='the_takaway'&gt;The Takaway&lt;/h3&gt;

&lt;p&gt;On Sunday, we walked away without our name on the list of finalists. We weren&amp;#8217;t selected to do a live demo and compete for a trip to the finals in Palo Alto, California. Although we were happy to leave a little early and get to bed, it was disappointing not to make the final round, yet somewhat expected given the product that we built. We learned an awful lot, however. Working under pressure is always a learning experience, and a different learning experience depending on the team.&lt;/p&gt;

&lt;p&gt;For this competition, the team was excellent. I couldn&amp;#8217;t have asked to work with better programmers than Will and Teddy and Parker and Worth did a kickass job with UI, UX, marketing, product vision, and videography. We had many laughs and much fun even though we were plugged in and working hard. As I described before, we accomplished more than I thought was possible in such a short time, especially considering how little we had prepared ahead of the competition. Most of the credit goes to Worth on this one - Natarré was his brainchild and I hope he sticks with it and adds the features that we couldn&amp;#8217;t find time to build.&lt;/p&gt;

&lt;p&gt;Although the ideas were there, however, the tech lacked something that some of the other teams seemed to conquer. While we spend a lot of time thinking about the interesting aspects of our product and focusing on the overall vision, we failed to do something unique with sponsor API&amp;#8217;s and ended up not presenting the best tech to the judges. AngelHack is, after all, a hackathon. It is more a place to try to make bleeding edge, but buggy tech in a short time, not a place to develop a product. We built a social network with a like button and a reading list - it turns out that has been done before.&lt;/p&gt;

&lt;h3 id='the_future'&gt;The Future&lt;/h3&gt;

&lt;p&gt;I look forward to entering another hackathon down the road. The energy at AngelHack Boston was great and the people that I met (most of whom were far better programmers than I) fully embodied the hacker culture - nice, helpful people who were interested in coding for the sake of the technology, not for the sake of the money. It was a good networking experience and opened my eyes to new programming techniques and tools.&lt;/p&gt;

&lt;p&gt;I also know not to show up at a hackathon and expect to develop a product - that is something that should be planned in advance and executed after the code is complete. Having flowcharts, mockups, ideas for graphics, drawings, frameworks, and a complete knowledge of tools to streamline the backend build will be a huge advantage in the future. If I make it to &lt;a href='http://techcrunch.com/events/disrupt-sf-2012/'&gt;Disrupt SF 2012&lt;/a&gt;, serious prior planning will be key, as will be the knowledge of backend products like &lt;a href='http://www.kinvey.com/'&gt;Kinvey&lt;/a&gt; and &lt;a href='http://www.kinvey.com/'&gt;CloudMine&lt;/a&gt; and fast deployment services. I can&amp;#8217;t wait.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>iOS Device Rotation</title>
      <link>http://tnbeatty.github.com/blog/2012/06/10/iOS-device-rotation.html</link>
      <pubDate>Sun, 10 Jun 2012 00:00:00 -0400</pubDate>
      <author>nate@strabogis.com (Nate Beatty)</author>
      <guid>http://tnbeatty.github.com/blog/2012/06/10/iOS-device-rotation</guid>
      <description>&lt;p&gt;10 Jun 2012 - Woodstock, VT&lt;/p&gt;
&lt;pre class='markdown-html-error' style='border: solid 3px red; background-color: pink'&gt;REXML could not parse this XML/HTML: 
&amp;lt;!---
Post content goes here.
--&amp;gt;&lt;/pre&gt;
&lt;p&gt;You can handle device orientation changes in a number of different ways in iOS. The standard way is to let the device call a delegate method within each view controller and change any UI elements to fit the new dimensions. If we just need to rotate UI elements onscreen and don&amp;#8217;t want to actually change the device UI Interface Orientation, things get a little more complicated.&lt;/p&gt;

&lt;h3 id='standard_orientation_handling'&gt;Standard Orientation Handling&lt;/h3&gt;

&lt;p&gt;It is pretty standard to return YES for any supported orientations when the &lt;a href='http://developer.apple.com/library/ios/#documentation/uikit/reference/UIViewController_Class/Reference/Reference.html'&gt;shouldAutorotateToInterfaceOrientation:&lt;/a&gt; method is called in a view controller as below:&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;Apple documents this technique well in their orientation changes &lt;a href='http://developer.apple.com/library/ios/#featuredarticles/ViewControllerPGforiPhoneOS/RespondingtoDeviceOrientationChanges/RespondingtoDeviceOrientationChanges.html#//apple_ref/doc/uid/TP40007457-CH7-SW1'&gt;guide&lt;/a&gt;. After returning a true response in the above method, &lt;a href='http://developer.apple.com/library/ios/#documentation/UIKit/Reference/UIViewController_Class/Reference/Reference.html#//apple_ref/occ/instm/UIViewController/willRotateToInterfaceOrientation:duration:'&gt;willRotateToInterfaceOrientation:Duration:&lt;/a&gt; gets called. Within this method, you can handle any necessary animations.&lt;/p&gt;

&lt;h3 id='rotating_onscreen_ui_elements'&gt;Rotating On-Screen UI Elements&lt;/h3&gt;

&lt;p&gt;Lets say, for example, that we want to rotate an element on the screen whenever the device changes its interface orientation. At the same time, we don&amp;#8217;t actually want the interface orientation to change because we don&amp;#8217;t want to move elements around on the screen (toolbars, for example).&lt;/p&gt;

&lt;p&gt;If what I am talking about is unclear, Apple&amp;#8217;s camera app is a perfect example to illustrate my point. When you switch from holding the device vertically to horizontally when using this application, the camera image on the record button, as well as the other icon-toolbar images, rotate to the proper orientation.&lt;/p&gt;

&lt;p&gt;Trying to return YES for &lt;a href='http://developer.apple.com/library/ios/#documentation/uikit/reference/UIViewController_Class/Reference/Reference.html'&gt;shouldAutorotateToInterfaceOrientation:&lt;/a&gt; only when UIInterfaceOrientationPortrait == interfaceOrientation after rotating the necessary UI Elements doesn&amp;#8217;t work. Because the interface orientation is never actually changed when the device rotates in this case, returning the device to vertical never calls this method. We&amp;#8217;ll need to resort to another technique to determine device orientation changes.&lt;/p&gt;

&lt;h3 id='detecting_device_orientation_changes'&gt;Detecting Device Orientation Changes&lt;/h3&gt;

&lt;p&gt;In the view controller&amp;#8217;s viewDidLoad method, begin listening for a notification:&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;Where a method in the view controller is called every time the device orientation is changed. In my view controller, I included the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    -(void)deviceDidRotate:(NSNotification *)notification;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Within this method, I rotate my UI elements according to the device orientation found by calling:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    [[UIDevice currentDevice] orientation];&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We just need to be careful when doing this because the device has more than four &lt;a href='http://developer.apple.com/library/ios/#documentation/uikit/reference/UIDevice_Class/Reference/UIDevice.html#//apple_ref/c/tdef/UIDeviceOrientation'&gt;possible orientations&lt;/a&gt; - it detects face-up as well as face-down - which are irrelevant in my application.&lt;/p&gt;

&lt;h3 id='handling_rotation'&gt;Handling Rotation&lt;/h3&gt;

&lt;p&gt;Once we know that the device orientation has changed, we can handle the change by calling a helper method or animating any necessary UI elements. We just need to be careful because the device has face-down and face-up orientations.&lt;/p&gt;

&lt;p&gt;I wrote a custom rotation method to handle animated rotations.&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;This cleans up the code a bit by providing the animation to rotate any UIImageView.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Website Construction with Jekyll</title>
      <link>http://tnbeatty.github.com/blog/2012/06/02/website-construction-with-jekyll.html</link>
      <pubDate>Sat, 02 Jun 2012 00:00:00 -0400</pubDate>
      <author>nate@strabogis.com (Nate Beatty)</author>
      <guid>http://tnbeatty.github.com/blog/2012/06/02/website-construction-with-jekyll</guid>
      <description>&lt;p&gt;02 Jun 2012 - Woodstock, VT&lt;/p&gt;
&lt;pre class='markdown-html-error' style='border: solid 3px red; background-color: pink'&gt;REXML could not parse this XML/HTML: 
&amp;lt;!---
Post content goes here.
--&amp;gt;&lt;/pre&gt;
&lt;p&gt;Now that I have the framework of my website constructed, I figured it would be a good time to write about how it is set up.&lt;/p&gt;

&lt;p&gt;&lt;img alt='Jekyll Monster' src='/assets/images/post_images/jekyll.png' /&gt;&lt;/p&gt;

&lt;p&gt;I decided to use Tom Preston-Werner&amp;#8217;s &lt;a href='https://github.com/mojombo/jekyll'&gt;Jekyll&lt;/a&gt; generator. Using Jekyll makes it easy to build new posts and pages quickly and in markdown (my favorite&amp;#8230; easy webdev). I hosted the site on &lt;a href='http://pages.github.com/'&gt;git pages&lt;/a&gt; because it is convenient to edit, push and track changes, and it&amp;#8217;s free (a big improvement over &lt;a href='http://www.fatcow.com/'&gt;FatCow&lt;/a&gt;, which costs me 56 bucks every year).&lt;/p&gt;

&lt;p&gt;After laying out the structure of the site and doing some quick CSS styling, I had a pretty decent site in just a couple of hours. I ran into a couple of snags, however. Some googling revealed the answers - jekyll sites seem to be becoming pretty popular.&lt;/p&gt;

&lt;h3 id='css_transitions'&gt;CSS Transitions&lt;/h3&gt;

&lt;p&gt;I get my hands dirty with CSS from time to time, but I am by no means a &lt;a href='http://willpots.com'&gt;CSS guru&lt;/a&gt;. Most of my time these days is spent programming in Objective-C for iOS. I was pleased to stumble upon the &amp;#8220;transition&amp;#8221; tag. Replacing jQuery or JavaScript with CSS only makes things faster and more convenient.&lt;/p&gt;

&lt;p&gt;This is easy enough to look up, but I will provide an example here. I like hover-over links to be a little more subtle rather than having harsh and rapid color changes. The transition makes :hover much smoother and I think it goes well with the soft feel of a site with lots of textures and shadows. Thus, I decided to make all of the blue links in the body of my site use a css transition on hover to change color. &lt;a href='http://caniuse.com/#search=transition'&gt;Cross-browser support&lt;/a&gt; is pretty good, too. Here&amp;#8217;s how it&amp;#8217;s done:&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;Just specify whatever tag you would like to change and the time over which the browser should linearly animate that change. Piece of cake.&lt;/p&gt;

&lt;h3 id='sass_and_css'&gt;SASS and CSS&lt;/h3&gt;

&lt;p&gt;Once I got all of my CSS figured out, I remembered how much I like &lt;a href='http://sass-lang.com/'&gt;SASS&lt;/a&gt;. SASS is compact, easy to read, and easy to keep organized. Turns out it&amp;#8217;s easy to use with Jekyll, too, especially since Jekyll &lt;a href='https://github.com/mojombo/jekyll/wiki/Plugins'&gt;plugin support&lt;/a&gt;. Read about converting in general under the heading &amp;#8221;&lt;a href='https://github.com/mojombo/jekyll/wiki/Plugins'&gt;converters&lt;/a&gt;.&amp;#8221; Available plugins are listed at the bottom - Instead of writing one from scratch, I used the &lt;a href='https://gist.github.com/960150'&gt;SASS scss Converter by Mark Wolfe&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To allow the use of SASS .scss files in place of css, I created a new &lt;em&gt;plugins directory in the root directory of my Jekyll site. Then I made a new file with filename sass&lt;/em&gt;converter.rb. That&amp;#8217;s it. Now when I run &amp;#8220;$ jekyll &amp;#8211;server&amp;#8221; in my terminal (generate my site), it automatically generates CSS for me. Nice.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sass_converter.rb&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;Of course, after doing this, you can still use standard CSS within a .scss file as SASS is a strict superset of CSS. Also, .css files will not be touched by the sass converter.&lt;/p&gt;

&lt;h3 id='sass_highlighting_in_sublimetext'&gt;SASS Highlighting in SublimeText&lt;/h3&gt;

&lt;p&gt;I love developing in &lt;a href='http://www.sublimetext.com/'&gt;Sublime&lt;/a&gt;. They have syntax highlighting support for most common languages, but I needed to install a custom .tmbundle in this case. This is easy enough to do - thanks to &lt;a href='https://github.com/kuroir'&gt;kuroir&lt;/a&gt; for his work. Run the following in terminal:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	$ cd ~/Library/Application\ Support/Sublime\ Text\ 2/Packages/
	$ git clone git://github.com/kuroir/SCSS.tmbundle.git &amp;quot;SCSS&amp;quot;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Restart Sublime and you&amp;#8217;re good to go.&lt;/p&gt;

&lt;h3 id='github'&gt;Github&lt;/h3&gt;

&lt;p&gt;If you are interested in exploring the source code further, &lt;a href='https://github.com/tnbeatty/tnbeatty.github.com'&gt;check it out on github&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Hello World</title>
      <link>http://tnbeatty.github.com/blog/2012/05/27/hello-world.html</link>
      <pubDate>Sun, 27 May 2012 00:00:00 -0400</pubDate>
      <author>nate@strabogis.com (Nate Beatty)</author>
      <guid>http://tnbeatty.github.com/blog/2012/05/27/hello-world</guid>
      <description>&lt;p&gt;27 May 2012 - Madison, CT&lt;/p&gt;
&lt;pre class='markdown-html-error' style='border: solid 3px red; background-color: pink'&gt;REXML could not parse this XML/HTML: 
&amp;lt;!---
Post content goes here.
--&amp;gt;&lt;/pre&gt;
&lt;p&gt;Welcome to my blog! Hopefully, I will have a chance to post regularly about things which interest me. The topic will mostly be limited to coding - tips and tricks that I discover throughout the course of my work - and the occasional reference to physics or cycling.&lt;/p&gt;

&lt;p&gt;I built this website to replace my previous site, &lt;a href='http://natebeatty.com'&gt;natebeatty.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I hope you enjoy it!&lt;/p&gt;

&lt;p&gt;Best,&lt;/p&gt;

&lt;p&gt;Nate&lt;/p&gt;

&lt;p&gt;ps: .brain is not accepted by gcc&lt;/p&gt;</description>
    </item>
    

  </channel> 
</rss>
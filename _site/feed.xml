<?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Creative Hipster Blog Title</title>
    <link>http://tnbeatty.github.com</link>
    <atom:link href="http://tnbeatty.github.com/feed.xml" rel="self" type="application/rss+xml" />
    <description>I'm not lazy - my code's just compiling.</description>
    <language>en-us</language>
    <pubDate>Sun, 10 Jun 2012 18:06:16 -0400</pubDate>
    <lastBuildDate>Sun, 10 Jun 2012 18:06:16 -0400</lastBuildDate>

    
    <item>
      <title>iOS Device Rotation</title>
      <link>http://tnbeatty.github.com/blog/2012/06/10/iOS-device-rotation.html</link>
      <pubDate>Sun, 10 Jun 2012 00:00:00 -0400</pubDate>
      <author>nate@strabogis.com (Nate Beatty)</author>
      <guid>http://tnbeatty.github.com/blog/2012/06/10/iOS-device-rotation</guid>
      <description>&lt;p&gt;10 Jun 2012 - Woodstock, VT&lt;/p&gt;
&lt;!---
Post content goes here.
--&gt;
&lt;p&gt;You can handle device orientation changes in a number of different ways in iOS. The standard way is to let the device call a delegate method within each view controller and change any UI elements to fit the new dimensions. If we just need to rotate UI elements onscreen and don&amp;#8217;t want to actually change the device UI Interface Orientation, things get a little more complicated.&lt;/p&gt;

&lt;h3 id='standard_orientation_handling'&gt;Standard Orientation Handling&lt;/h3&gt;

&lt;p&gt;It is pretty standard to return YES for any supported orientations when the &lt;a href='http://developer.apple.com/library/ios/#documentation/uikit/reference/UIViewController_Class/Reference/Reference.html'&gt;shouldAutorotateToInterfaceOrientation:&lt;/a&gt; method is called in a view controller as below:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='objectivec'&gt;&lt;span class='o'&gt;-&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kt'&gt;BOOL&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;&lt;span class='nl'&gt;shouldAutorotateToInterfaceOrientation:&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;UIInterfaceOrientation&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;&lt;span class='n'&gt;interfaceOrientation&lt;/span&gt;
&lt;span class='p'&gt;{&lt;/span&gt;
    &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;interfaceOrientation&lt;/span&gt; &lt;span class='o'&gt;==&lt;/span&gt; &lt;span class='n'&gt;UIInterfaceOrientationPortrait&lt;/span&gt; &lt;span class='o'&gt;||&lt;/span&gt;
            &lt;span class='n'&gt;interfaceOrientation&lt;/span&gt; &lt;span class='o'&gt;==&lt;/span&gt; &lt;span class='n'&gt;UIInterfaceOrientationLandscapeRight&lt;/span&gt;&lt;span class='o'&gt;||&lt;/span&gt;
            &lt;span class='n'&gt;interfaceOrientation&lt;/span&gt; &lt;span class='o'&gt;==&lt;/span&gt; &lt;span class='n'&gt;UIInterfaceOrientationLandscapeLeft&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Apple documents this technique well in their orientation changes &lt;a href='http://developer.apple.com/library/ios/#featuredarticles/ViewControllerPGforiPhoneOS/RespondingtoDeviceOrientationChanges/RespondingtoDeviceOrientationChanges.html#//apple_ref/doc/uid/TP40007457-CH7-SW1'&gt;guide&lt;/a&gt;. After returning a true response in the above method, &lt;a href='http://developer.apple.com/library/ios/#documentation/UIKit/Reference/UIViewController_Class/Reference/Reference.html#//apple_ref/occ/instm/UIViewController/willRotateToInterfaceOrientation:duration:'&gt;willRotateToInterfaceOrientation:Duration:&lt;/a&gt; gets called. Within this method, you can handle any necessary animations.&lt;/p&gt;

&lt;h3 id='rotating_onscreen_ui_elements'&gt;Rotating On-Screen UI Elements&lt;/h3&gt;

&lt;p&gt;Lets say, for example, that we want to rotate an element on the screen whenever the device changes its interface orientation. At the same time, we don&amp;#8217;t actually want the interface orientation to change because we don&amp;#8217;t want to move elements around on the screen (toolbars, for example).&lt;/p&gt;

&lt;p&gt;If what I am talking about is unclear, Apple&amp;#8217;s camera app is a perfect example to illustrate my point. When you switch from holding the device vertically to horizontally when using this application, the camera image on the record button, as well as the other icon-toolbar images, rotate to the proper orientation.&lt;/p&gt;

&lt;p&gt;Trying to return YES for &lt;a href='http://developer.apple.com/library/ios/#documentation/uikit/reference/UIViewController_Class/Reference/Reference.html'&gt;shouldAutorotateToInterfaceOrientation:&lt;/a&gt; only when UIInterfaceOrientationPortrait == interfaceOrientation after rotating the necessary UI Elements doesn&amp;#8217;t work. Because the interface orientation is never actually changed when the device rotates in this case, returning the device to vertical never calls this method. We&amp;#8217;ll need to resort to another technique to determine device orientation changes.&lt;/p&gt;

&lt;h3 id='detecting_device_orientation_changes'&gt;Detecting Device Orientation Changes&lt;/h3&gt;

&lt;p&gt;In the view controller&amp;#8217;s viewDidLoad method, begin listening for a notification:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='objectivec'&gt;&lt;span class='p'&gt;[[&lt;/span&gt;&lt;span class='n'&gt;UIDevice&lt;/span&gt; &lt;span class='n'&gt;currentDevice&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='n'&gt;beginGeneratingDeviceOrientationNotifications&lt;/span&gt;&lt;span class='p'&gt;];&lt;/span&gt;
&lt;span class='p'&gt;[[&lt;/span&gt;&lt;span class='n'&gt;NSNotificationCenter&lt;/span&gt; &lt;span class='n'&gt;defaultCenter&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='nl'&gt;addObserver:&lt;/span&gt;&lt;span class='n'&gt;self&lt;/span&gt; 
                                         &lt;span class='nl'&gt;selector:&lt;/span&gt;&lt;span class='k'&gt;@selector&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nl'&gt;deviceDidRotate:&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; 
                                             &lt;span class='nl'&gt;name:&lt;/span&gt;&lt;span class='n'&gt;UIDeviceOrientationDidChangeNotification&lt;/span&gt; 
                                           &lt;span class='nl'&gt;object:&lt;/span&gt;&lt;span class='nb'&gt;nil&lt;/span&gt;&lt;span class='p'&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Where a method in the view controller is called every time the device orientation is changed. In my view controller, I included the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    -(void)deviceDidRotate:(NSNotification *)notification;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Within this method, I rotate my UI elements according to the device orientation found by calling:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    [[UIDevice currentDevice] orientation];&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We just need to be careful when doing this because the device has more than four &lt;a href='http://developer.apple.com/library/ios/#documentation/uikit/reference/UIDevice_Class/Reference/UIDevice.html#//apple_ref/c/tdef/UIDeviceOrientation'&gt;possible orientations&lt;/a&gt; - it detects face-up as well as face-down - which are irrelevant in my application.&lt;/p&gt;

&lt;h3 id='handling_rotation'&gt;Handling Rotation&lt;/h3&gt;

&lt;p&gt;Once we know that the device orientation has changed, we can handle the change by calling a helper method or animating any necessary UI elements. We just need to be careful because the device has face-down and face-up orientations.&lt;/p&gt;

&lt;p&gt;I wrote a custom rotation method to handle animated rotations.&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='objectivec'&gt;&lt;span class='o'&gt;-&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kt'&gt;void&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;&lt;span class='nl'&gt;rotateImage:&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;UIImageView&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;&lt;span class='n'&gt;image&lt;/span&gt; 
           &lt;span class='nl'&gt;duration:&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;NSTimeInterval&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;&lt;span class='n'&gt;duration&lt;/span&gt;
              &lt;span class='nl'&gt;curve:&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kt'&gt;int&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;&lt;span class='n'&gt;curve&lt;/span&gt; 
            &lt;span class='nl'&gt;radians:&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;CGFloat&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;&lt;span class='n'&gt;radians&lt;/span&gt;
&lt;span class='p'&gt;{&lt;/span&gt;
    &lt;span class='c1'&gt;// Setup the animation                                                                           &lt;/span&gt;
    &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;UIView&lt;/span&gt; &lt;span class='nl'&gt;beginAnimations:&lt;/span&gt;&lt;span class='nb'&gt;nil&lt;/span&gt; &lt;span class='nl'&gt;context:&lt;/span&gt;&lt;span class='nb'&gt;NULL&lt;/span&gt;&lt;span class='p'&gt;];&lt;/span&gt;
    &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;UIView&lt;/span&gt; &lt;span class='nl'&gt;setAnimationDuration:&lt;/span&gt;&lt;span class='n'&gt;duration&lt;/span&gt;&lt;span class='p'&gt;];&lt;/span&gt;
    &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;UIView&lt;/span&gt; &lt;span class='nl'&gt;setAnimationCurve:&lt;/span&gt;&lt;span class='n'&gt;curve&lt;/span&gt;&lt;span class='p'&gt;];&lt;/span&gt;
    &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;UIView&lt;/span&gt; &lt;span class='nl'&gt;setAnimationBeginsFromCurrentState:&lt;/span&gt;&lt;span class='n'&gt;YES&lt;/span&gt;&lt;span class='p'&gt;];&lt;/span&gt;

    &lt;span class='c1'&gt;// The transform matrix                                                                          &lt;/span&gt;
    &lt;span class='n'&gt;CGAffineTransform&lt;/span&gt; &lt;span class='n'&gt;transform&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;CGAffineTransformMakeRotation&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;radians&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
    &lt;span class='n'&gt;image&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;transform&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;transform&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;

    &lt;span class='c1'&gt;// Commit the changes                                                                            &lt;/span&gt;
    &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;UIView&lt;/span&gt; &lt;span class='n'&gt;commitAnimations&lt;/span&gt;&lt;span class='p'&gt;];&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;This cleans up the code a bit by providing the animation to rotate any UIImageView.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Website Construction with Jekyll</title>
      <link>http://tnbeatty.github.com/blog/2012/06/02/website-construction-with-jekyll.html</link>
      <pubDate>Sat, 02 Jun 2012 00:00:00 -0400</pubDate>
      <author>nate@strabogis.com (Nate Beatty)</author>
      <guid>http://tnbeatty.github.com/blog/2012/06/02/website-construction-with-jekyll</guid>
      <description>&lt;p&gt;02 Jun 2012 - Woodstock, VT&lt;/p&gt;
&lt;!---
Post content goes here.
--&gt;
&lt;p&gt;Now that I have the framework of my website constructed, I figured it would be a good time to write about how it is set up.&lt;/p&gt;

&lt;p&gt;&lt;img alt='Jekyll Monster' src='/assets/images/post_images/jekyll.png' /&gt;&lt;/p&gt;

&lt;p&gt;I decided to use Tom Preston-Werner&amp;#8217;s &lt;a href='https://github.com/mojombo/jekyll'&gt;Jekyll&lt;/a&gt; generator. Using Jekyll makes it easy to build new posts and pages quickly and in markdown (my favorite&amp;#8230; easy webdev). I hosted the site on &lt;a href='http://pages.github.com/'&gt;git pages&lt;/a&gt; because it is convenient to edit, push and track changes, and it&amp;#8217;s free (a big improvement over &lt;a href='http://www.fatcow.com/'&gt;FatCow&lt;/a&gt;, which costs me 56 bucks every year).&lt;/p&gt;

&lt;p&gt;After laying out the structure of the site and doing some quick CSS styling, I had a pretty decent site in just a couple of hours. I ran into a couple of snags, however. Some googling revealed the answers - jekyll sites seem to be becoming pretty popular.&lt;/p&gt;

&lt;h3 id='css_transitions'&gt;CSS Transitions&lt;/h3&gt;

&lt;p&gt;I get my hands dirty with CSS from time to time, but I am by no means a &lt;a href='http://willpots.com'&gt;CSS guru&lt;/a&gt;. Most of my time these days is spent programming in Objective-C for iOS. I was pleased to stumble upon the &amp;#8220;transition&amp;#8221; tag. Replacing jQuery or JavaScript with CSS only makes things faster and more convenient.&lt;/p&gt;

&lt;p&gt;This is easy enough to look up, but I will provide an example here. I like hover-over links to be a little more subtle rather than having harsh and rapid color changes. The transition makes :hover much smoother and I think it goes well with the soft feel of a site with lots of textures and shadows. Thus, I decided to make all of the blue links in the body of my site use a css transition on hover to change color. &lt;a href='http://caniuse.com/#search=transition'&gt;Cross-browser support&lt;/a&gt; is pretty good, too. Here&amp;#8217;s how it&amp;#8217;s done:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='css'&gt;&lt;span class='nt'&gt;a&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
	&lt;span class='k'&gt;color&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='m'&gt;#08c&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
	&lt;span class='n'&gt;transition&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='k'&gt;color&lt;/span&gt; &lt;span class='m'&gt;0.2s&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
	&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='n'&gt;moz&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='n'&gt;transition&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='k'&gt;color&lt;/span&gt; &lt;span class='m'&gt;0.2s&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
	&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='n'&gt;webkit&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='n'&gt;transition&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='k'&gt;color&lt;/span&gt; &lt;span class='m'&gt;0.2s&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
	&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='err'&gt;o&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='n'&gt;transition&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='k'&gt;color&lt;/span&gt; &lt;span class='m'&gt;0.2s&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;

&lt;span class='nt'&gt;a&lt;/span&gt;&lt;span class='nd'&gt;:hover&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
	&lt;span class='k'&gt;color&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='m'&gt;#006396&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Just specify whatever tag you would like to change and the time over which the browser should linearly animate that change. Piece of cake.&lt;/p&gt;

&lt;h3 id='sass_and_css'&gt;SASS and CSS&lt;/h3&gt;

&lt;p&gt;Once I got all of my CSS figured out, I remembered how much I like &lt;a href='http://sass-lang.com/'&gt;SASS&lt;/a&gt;. SASS is compact, easy to read, and easy to keep organized. Turns out it&amp;#8217;s easy to use with Jekyll, too, especially since Jekyll &lt;a href='https://github.com/mojombo/jekyll/wiki/Plugins'&gt;plugin support&lt;/a&gt;. Read about converting in general under the heading &amp;#8221;&lt;a href='https://github.com/mojombo/jekyll/wiki/Plugins'&gt;converters&lt;/a&gt;.&amp;#8221; Available plugins are listed at the bottom - Instead of writing one from scratch, I used the &lt;a href='https://gist.github.com/960150'&gt;SASS scss Converter by Mark Wolfe&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To allow the use of SASS .scss files in place of css, I created a new &lt;em&gt;plugins directory in the root directory of my Jekyll site. Then I made a new file with filename sass&lt;/em&gt;converter.rb. That&amp;#8217;s it. Now when I run &amp;#8220;$ jekyll &amp;#8211;server&amp;#8221; in my terminal (generate my site), it automatically generates CSS for me. Nice.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sass_converter.rb&lt;/code&gt;&lt;/pre&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='ruby'&gt;&lt;span class='k'&gt;module&lt;/span&gt; &lt;span class='nn'&gt;Jekyll&lt;/span&gt;
  &lt;span class='nb'&gt;require&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;sass&amp;#39;&lt;/span&gt;
  &lt;span class='k'&gt;class&lt;/span&gt; &lt;span class='nc'&gt;SassConverter&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;&lt;/span&gt; &lt;span class='no'&gt;Converter&lt;/span&gt;
    &lt;span class='n'&gt;safe&lt;/span&gt; &lt;span class='kp'&gt;true&lt;/span&gt;
    &lt;span class='n'&gt;priority&lt;/span&gt; &lt;span class='ss'&gt;:low&lt;/span&gt;

    &lt;span class='k'&gt;def&lt;/span&gt; &lt;span class='nf'&gt;matches&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;ext&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
      &lt;span class='n'&gt;ext&lt;/span&gt; &lt;span class='o'&gt;=~&lt;/span&gt; &lt;span class='sr'&gt;/scss/i&lt;/span&gt;
    &lt;span class='k'&gt;end&lt;/span&gt;

    &lt;span class='k'&gt;def&lt;/span&gt; &lt;span class='nf'&gt;output_ext&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;ext&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
      &lt;span class='s2'&gt;&amp;quot;.css&amp;quot;&lt;/span&gt;
    &lt;span class='k'&gt;end&lt;/span&gt;

    &lt;span class='k'&gt;def&lt;/span&gt; &lt;span class='nf'&gt;convert&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;content&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
      &lt;span class='k'&gt;begin&lt;/span&gt;
        &lt;span class='nb'&gt;puts&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;Performing Sass Conversion.&amp;quot;&lt;/span&gt;
        &lt;span class='n'&gt;engine&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='no'&gt;Sass&lt;/span&gt;&lt;span class='o'&gt;::&lt;/span&gt;&lt;span class='no'&gt;Engine&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;new&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;content&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='ss'&gt;:syntax&lt;/span&gt; &lt;span class='o'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='ss'&gt;:scss&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='ss'&gt;:load_paths&lt;/span&gt; &lt;span class='o'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='o'&gt;[&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;./css/&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;]&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
        &lt;span class='n'&gt;engine&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;render&lt;/span&gt;
      &lt;span class='k'&gt;rescue&lt;/span&gt; &lt;span class='no'&gt;StandardError&lt;/span&gt; &lt;span class='o'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='n'&gt;e&lt;/span&gt;
        &lt;span class='nb'&gt;puts&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;*** SASS Error: &amp;quot;&lt;/span&gt; &lt;span class='o'&gt;+&lt;/span&gt; &lt;span class='n'&gt;e&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='n'&gt;message&lt;/span&gt;
      &lt;span class='k'&gt;end&lt;/span&gt;
    &lt;span class='k'&gt;end&lt;/span&gt;

  &lt;span class='k'&gt;end&lt;/span&gt;
&lt;span class='k'&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Of course, after doing this, you can still use standard CSS within a .scss file as SASS is a strict superset of CSS. Also, .css files will not be touched by the sass converter.&lt;/p&gt;

&lt;h3 id='sass_highlighting_in_sublimetext'&gt;SASS Highlighting in SublimeText&lt;/h3&gt;

&lt;p&gt;I love developing in &lt;a href='http://www.sublimetext.com/'&gt;Sublime&lt;/a&gt;. They have syntax highlighting support for most common languages, but I needed to install a custom .tmbundle in this case. This is easy enough to do - thanks to &lt;a href='https://github.com/kuroir'&gt;kuroir&lt;/a&gt; for his work. Run the following in terminal:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	$ cd ~/Library/Application\ Support/Sublime\ Text\ 2/Packages/
	$ git clone git://github.com/kuroir/SCSS.tmbundle.git &amp;quot;SCSS&amp;quot;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Restart Sublime and you&amp;#8217;re good to go.&lt;/p&gt;

&lt;h3 id='github'&gt;Github&lt;/h3&gt;

&lt;p&gt;If you are interested in exploring the source code further, &lt;a href='https://github.com/tnbeatty/tnbeatty.github.com'&gt;check it out on github&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Hello World</title>
      <link>http://tnbeatty.github.com/blog/2012/05/27/hello-world.html</link>
      <pubDate>Sun, 27 May 2012 00:00:00 -0400</pubDate>
      <author>nate@strabogis.com (Nate Beatty)</author>
      <guid>http://tnbeatty.github.com/blog/2012/05/27/hello-world</guid>
      <description>&lt;p&gt;27 May 2012 - Madison, CT&lt;/p&gt;
&lt;!---
Post content goes here.
--&gt;
&lt;p&gt;Welcome to my blog! Hopefully, I will have a chance to post regularly about things which interest me. The topic will mostly be limited to coding - tips and tricks that I discover throughout the course of my work - and the occasional reference to physics or cycling.&lt;/p&gt;

&lt;p&gt;I built this website to replace my previous site, &lt;a href='http://natebeatty.com'&gt;natebeatty.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I hope you enjoy it!&lt;/p&gt;

&lt;p&gt;Best,&lt;/p&gt;

&lt;p&gt;Nate&lt;/p&gt;</description>
    </item>
    

  </channel> 
</rss>